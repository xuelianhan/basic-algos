package org.ict.algorithm.leetcode.bitvector;

/**
 * @author sniper
 * @date 07 Dec, 2022
 */
public class LeftRightShift {

    public static void main(String[] args) {
        testSignedRightShiftOnDiffV3();
        //testSignedRightShiftOnDiffV3();
        //testUnsignedRightShiftOnDiffV2();
        //testUnsignedRightShiftOnDiffV1();
        //testSignedRightShift();
        //testUnsignedRightShift();
        //testLeftShiftV2();
        //testLeftShiftV1();
        //testLeftShift();
        //testRightShift();
    }


    /**
     * -2147483648 >> 31:-1
     * -2147483648 >> 30:-2
     * -2147483648 >> 29:-4
     * -2147483648 >> 28:-8
     * -2147483648 >> 27:-16
     * -2147483648 >> 26:-32
     * -2147483648 >> 25:-64
     * -2147483648 >> 24:-128
     * -2147483648 >> 23:-256
     * -2147483648 >> 22:-512
     * -2147483648 >> 21:-1024
     * -2147483648 >> 20:-2048
     * -2147483648 >> 19:-4096
     * -2147483648 >> 18:-8192
     * -2147483648 >> 17:-16384
     * -2147483648 >> 16:-32768
     * -2147483648 >> 15:-65536
     * -2147483648 >> 14:-131072
     * -2147483648 >> 13:-262144
     * -2147483648 >> 12:-524288
     * -2147483648 >> 11:-1048576
     * -2147483648 >> 10:-2097152
     * -2147483648 >> 9:-4194304
     * -2147483648 >> 8:-8388608
     * -2147483648 >> 7:-16777216
     * -2147483648 >> 6:-33554432
     * -2147483648 >> 5:-67108864
     * -2147483648 >> 4:-134217728
     * -2147483648 >> 3:-268435456
     * -2147483648 >> 2:-536870912
     * -2147483648 >> 1:-1073741824
     * -2147483648 >> 0:-2147483648
     */
    public static void testSignedRightShiftOnDiffV3() {
        /**
         * 0x80000000
         */
        int a = Integer.MIN_VALUE;
        for (int x = 31; x >= 0; x--) {
            int y = a >> x;
            System.out.println(a + " >> " + x + ":" + y);
        }
    }

    /**
     * -2147483648 >>> 31:1
     * -2147483648 >>> 30:2
     * -2147483648 >>> 29:4
     * -2147483648 >>> 28:8
     * -2147483648 >>> 27:16
     * -2147483648 >>> 26:32
     * -2147483648 >>> 25:64
     * -2147483648 >>> 24:128
     * -2147483648 >>> 23:256
     * -2147483648 >>> 22:512
     * -2147483648 >>> 21:1024
     * -2147483648 >>> 20:2048
     * -2147483648 >>> 19:4096
     * -2147483648 >>> 18:8192
     * -2147483648 >>> 17:16384
     * -2147483648 >>> 16:32768
     * -2147483648 >>> 15:65536
     * -2147483648 >>> 14:131072
     * -2147483648 >>> 13:262144
     * -2147483648 >>> 12:524288
     * -2147483648 >>> 11:1048576
     * -2147483648 >>> 10:2097152
     * -2147483648 >>> 9:4194304
     * -2147483648 >>> 8:8388608
     * -2147483648 >>> 7:16777216
     * -2147483648 >>> 6:33554432
     * -2147483648 >>> 5:67108864
     * -2147483648 >>> 4:134217728
     * -2147483648 >>> 3:268435456
     * -2147483648 >>> 2:536870912
     * -2147483648 >>> 1:1073741824
     * -2147483648 >>> 0:-2147483648
     */
    public static void testUnsignedRightShiftOnDiffV1() {
        /**
         * 0x80000000
         */
        int a = Integer.MIN_VALUE;
        for (int x = 31; x >= 0; x--) {
            int y = a >>> x;
            System.out.println(a + " >>> " + x + ":" + y);
        }
    }


    /**
     * 2147483647 >>> 31:0
     * 2147483647 >>> 30:1
     * 2147483647 >>> 29:3
     * 2147483647 >>> 28:7
     * 2147483647 >>> 27:15
     * 2147483647 >>> 26:31
     * 2147483647 >>> 25:63
     * 2147483647 >>> 24:127
     * 2147483647 >>> 23:255
     * 2147483647 >>> 22:511
     * 2147483647 >>> 21:1023
     * 2147483647 >>> 20:2047
     * 2147483647 >>> 19:4095
     * 2147483647 >>> 18:8191
     * 2147483647 >>> 17:16383
     * 2147483647 >>> 16:32767
     * 2147483647 >>> 15:65535
     * 2147483647 >>> 14:131071
     * 2147483647 >>> 13:262143
     * 2147483647 >>> 12:524287
     * 2147483647 >>> 11:1048575
     * 2147483647 >>> 10:2097151
     * 2147483647 >>> 9:4194303
     * 2147483647 >>> 8:8388607
     * 2147483647 >>> 7:16777215
     * 2147483647 >>> 6:33554431
     * 2147483647 >>> 5:67108863
     * 2147483647 >>> 4:134217727
     * 2147483647 >>> 3:268435455
     * 2147483647 >>> 2:536870911
     * 2147483647 >>> 1:1073741823
     * 2147483647 >>> 0:2147483647
     */
    public static void testUnsignedRightShiftOnDiffV2() {
        /**
         * 0x7fffffff
         */
        int a = Integer.MAX_VALUE;
        for (int x = 31; x >= 0; x--) {
            int y = a >>> x;
            System.out.println(a + " >>> " + x + ":" + y);
        }
    }


    /**
     * (a >> 31): -1 - 1: -2
     * (a >> 30): -2 - 1: -3
     * (a >> 29): -4 - 1: -5
     * (a >> 28): -8 - 1: -9
     * (a >> 27): -16 - 1: -17
     * (a >> 26): -32 - 1: -33
     * (a >> 25): -64 - 1: -65
     * (a >> 24): -128 - 1: -129
     * (a >> 23): -256 - 1: -257
     * (a >> 22): -512 - 1: -513
     * (a >> 21): -1024 - 1: -1025
     * (a >> 20): -2048 - 1: -2049
     * (a >> 19): -4096 - 1: -4097
     * (a >> 18): -8192 - 1: -8193
     * (a >> 17): -16384 - 1: -16385
     * (a >> 16): -32768 - 1: -32769
     * (a >> 15): -65536 - 1: -65537
     * (a >> 14): -131072 - 1: -131073
     * (a >> 13): -262144 - 1: -262145
     * (a >> 12): -524288 - 1: -524289
     * (a >> 11): -1048576 - 1: -1048577
     * (a >> 10): -2097152 - 1: -2097153
     * (a >> 9): -4194304 - 1: -4194305
     * (a >> 8): -8388608 - 1: -8388609
     * (a >> 7): -16777216 - 1: -16777217
     * (a >> 6): -33554432 - 1: -33554433
     * (a >> 5): -67108864 - 1: -67108865
     * (a >> 4): -134217728 - 1: -134217729
     * (a >> 3): -268435456 - 1: -268435457
     * (a >> 2): -536870912 - 1: -536870913
     * (a >> 1): -1073741824 - 1: -1073741825
     * (a >> 0): -2147483648 - 1: 2147483647
     * (a >> 0):-2147483648
     * signed right shift res:1
     */
    public static void testSignedRightShift() {
        int res = 0;
        int a = -2147483648;
        int b = 1;
        for (int x = 31; x >= 0; x--) {
            /**
             * Use unsigned right shift, try from high bit to low bit.
             * we can't use signed right shift >> in here. Why?
             * Consider a case:
             * dividend: -2147483648
             * divisor:1
             * expected: -2147483648, if you use >>, you will get -1 at last.
             */
            System.out.println("(a >> " + x + "): " + (a >> x) + " - " + b + ": "  + ((a >> x) - b));
            if ((a >> x) - b >= 0) {
                System.out.println("(a >> " + x + "):" + (a >> x));
                res += 1 << x;
                a -= b <<x;
            }
        }
        System.out.println("signed right shift res:" + res);
    }

    /**
     * (a >>> 31): 1 - 1: 0
     * unsigned right shift res:-2147483648
     */
    public static void testUnsignedRightShift() {
        int res = 0;
        int a = -2147483648;//-2^31
        int b = 1;
        for (int x = 31; x >= 0; x--) {
            /**
             * Use unsigned right shift, try from high bit to low bit.
             * we can't use signed right shift >> in here. Why?
             * Consider a case:
             * dividend: -2147483648
             * divisor:1
             * expected: -2147483648, if you use >>, you will get -1 at last.
             */
            if ((a >>> x) - b >= 0) {
                System.out.println("(a >>> " + x + "):" + (a >>> x));
                res += 1 << x;
                a -= b <<x;
            }
        }
        System.out.println("unsigned right shift res:" + res);
    }

    /**
     * x: 0, (b << (x + 1)):2, x: 1
     * x: 1, (b << (x + 1)):4, x: 2
     * x: 2, (b << (x + 1)):8, x: 3
     * x: 3, (b << (x + 1)):16, x: 4
     * x: 4, (b << (x + 1)):32, x: 5
     * x: 5, (b << (x + 1)):64, x: 6
     * x: 6, (b << (x + 1)):128, x: 7
     * x: 7, (b << (x + 1)):256, x: 8
     * x: 8, (b << (x + 1)):512, x: 9
     * x: 9, (b << (x + 1)):1024, x: 10
     * x: 10, (b << (x + 1)):2048, x: 11
     * x: 11, (b << (x + 1)):4096, x: 12
     * x: 12, (b << (x + 1)):8192, x: 13
     * x: 13, (b << (x + 1)):16384, x: 14
     * x: 14, (b << (x + 1)):32768, x: 15
     * x: 15, (b << (x + 1)):65536, x: 16
     * x: 16, (b << (x + 1)):131072, x: 17
     * x: 17, (b << (x + 1)):262144, x: 18
     * x: 18, (b << (x + 1)):524288, x: 19
     * x: 19, (b << (x + 1)):1048576, x: 20
     * x: 20, (b << (x + 1)):2097152, x: 21
     * x: 21, (b << (x + 1)):4194304, x: 22
     * x: 22, (b << (x + 1)):8388608, x: 23
     * x: 23, (b << (x + 1)):16777216, x: 24
     * x: 24, (b << (x + 1)):33554432, x: 25
     * x: 25, (b << (x + 1)):67108864, x: 26
     * x: 26, (b << (x + 1)):134217728, x: 27
     * x: 27, (b << (x + 1)):268435456, x: 28
     * x: 28, (b << (x + 1)):536870912, x: 29
     * x: 29, (b << (x + 1)):1073741824, x: 30
     */
    public static void testLeftShiftV2() {
        int a = Integer.MAX_VALUE;
        int b = 1;
        int x = 0;
        while (a - (b << (x + 1)) >= 0) {
            System.out.print("x: " + x + ", (b << (x + 1)):" + (b << (x + 1)) + ", ");
            x++;
            System.out.println("x: " + x);
        }
    }


    /**
     * (b << x << 1) equals b << (x + 1).
     *
     * x: 0, (b << x << 1):2, x: 1
     * x: 1, (b << x << 1):4, x: 2
     * x: 2, (b << x << 1):8, x: 3
     * x: 3, (b << x << 1):16, x: 4
     * x: 4, (b << x << 1):32, x: 5
     * x: 5, (b << x << 1):64, x: 6
     * x: 6, (b << x << 1):128, x: 7
     * x: 7, (b << x << 1):256, x: 8
     * x: 8, (b << x << 1):512, x: 9
     * x: 9, (b << x << 1):1024, x: 10
     * x: 10, (b << x << 1):2048, x: 11
     * x: 11, (b << x << 1):4096, x: 12
     * x: 12, (b << x << 1):8192, x: 13
     * x: 13, (b << x << 1):16384, x: 14
     * x: 14, (b << x << 1):32768, x: 15
     * x: 15, (b << x << 1):65536, x: 16
     * x: 16, (b << x << 1):131072, x: 17
     * x: 17, (b << x << 1):262144, x: 18
     * x: 18, (b << x << 1):524288, x: 19
     * x: 19, (b << x << 1):1048576, x: 20
     * x: 20, (b << x << 1):2097152, x: 21
     * x: 21, (b << x << 1):4194304, x: 22
     * x: 22, (b << x << 1):8388608, x: 23
     * x: 23, (b << x << 1):16777216, x: 24
     * x: 24, (b << x << 1):33554432, x: 25
     * x: 25, (b << x << 1):67108864, x: 26
     * x: 26, (b << x << 1):134217728, x: 27
     * x: 27, (b << x << 1):268435456, x: 28
     * x: 28, (b << x << 1):536870912, x: 29
     * x: 29, (b << x << 1):1073741824, x: 30
     */
    public static void testLeftShiftV1() {
        int a = Integer.MAX_VALUE;
        int b = 1;
        int x = 0;
        while (a - (b << x << 1) >= 0) {
            System.out.print("x: " + x + ", (b << x << 1):" + (b << x << 1) + ", ");
            x++;
            System.out.println("x: " + x);
        }
    }

    /**
     * (b << x << 1) equals b << (x + 1).
     *
     * signed right shift equals divide 2^N, N belongs to closed range [1, 31]
     * 2147483647 >> 1: 1073741823
     * 2147483647 >> 2: 536870911
     * 2147483647 >> 3: 268435455
     * 2147483647 >> 4: 134217727
     * 2147483647 >> 5: 67108863
     * 2147483647 >> 6: 33554431
     * 2147483647 >> 7: 16777215
     * 2147483647 >> 8: 8388607
     * 2147483647 >> 9: 4194303
     * 2147483647 >> 10: 2097151
     * 2147483647 >> 11: 1048575
     * 2147483647 >> 12: 524287
     * 2147483647 >> 13: 262143
     * 2147483647 >> 14: 131071
     * 2147483647 >> 15: 65535
     * 2147483647 >> 16: 32767
     * 2147483647 >> 17: 16383
     * 2147483647 >> 18: 8191
     * 2147483647 >> 19: 4095
     * 2147483647 >> 20: 2047
     * 2147483647 >> 21: 1023
     * 2147483647 >> 22: 511
     * 2147483647 >> 23: 255
     * 2147483647 >> 24: 127
     * 2147483647 >> 25: 63
     * 2147483647 >> 26: 31
     * 2147483647 >> 27: 15
     * 2147483647 >> 28: 7
     * 2147483647 >> 29: 3
     * 2147483647 >> 30: 1
     * 2147483647 >> 31: 0
     */
    public static void testRightShift() {
        int x = 0;
        for (int i = 0; i < 31; i++) {
            x = Integer.MAX_VALUE >> (i + 1);
            System.out.println(Integer.MAX_VALUE + " >> " + (i + 1) + ": " + x);
        }
    }

    /**
     * Left shift equals multiply 2^N, N belongs to closed range [1, 31]
     * 1 << 1: 2
     * 1 << 2: 4
     * 1 << 3: 8
     * 1 << 4: 16
     * 1 << 5: 32
     * 1 << 6: 64
     * 1 << 7: 128
     * 1 << 8: 256
     * 1 << 9: 512
     * 1 << 10: 1024
     * 1 << 11: 2048
     * 1 << 12: 4096
     * 1 << 13: 8192
     * 1 << 14: 16384
     * 1 << 15: 32768
     * 1 << 16: 65536
     * 1 << 17: 131072
     * 1 << 18: 262144
     * 1 << 19: 524288
     * 1 << 20: 1048576
     * 1 << 21: 2097152
     * 1 << 22: 4194304
     * 1 << 23: 8388608
     * 1 << 24: 16777216
     * 1 << 25: 33554432
     * 1 << 26: 67108864
     * 1 << 27: 134217728
     * 1 << 28: 268435456
     * 1 << 29: 536870912
     * 1 << 30: 1073741824
     * 1 << 31: -2147483648
     */
    public static void testLeftShift() {
        int x = 0;
        for (int i = 0; i < 31; i++) {
            x = 1 << (i + 1);
            System.out.println("1 << " + (i + 1) + ": " + x);
        }
    }
}
